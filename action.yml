name: "branch-deploy"
description: "Enabling Branch Deployments through IssueOps with GitHub Actions"
author: "Grant Birkinbine"
branding:
  icon: 'git-branch'
  color: 'gray-dark'
inputs:
  github_token:
    description: The GitHub token used to create an authenticated client - Provided for you by default!
    default: ${{ github.token }}
    required: true
  status:
    description: The status of the GitHub Actions - For use in the post run workflow - Provided for you by default!
    default: ${{ job.status }}
    required: true
  environment:
    description: 'The name of the default environment to deploy to. Example: by default, if you type `.deploy`, it will assume "production" as the default environment'
    required: false
    default: "production"
  environment_targets:
    description: 'Optional (or additional) target environments to select for use with deployments. Example, "production,development,staging". Example  usage: `.deploy to development`, `.deploy to production`, `.deploy to staging`'
    required: false
    default: "production,development,staging"
  production_environment:
    description: 'The name of the production environment. Example: "production". By default, GitHub will set the "production_environment" to "true" if the environment name is "production". This option allows you to override that behavior so you can use "prod", "prd", "main", etc. as your production environment name.'
    required: false
    default: "production"
  reaction:
    description: 'If set, the specified emoji "reaction" is put on the comment to indicate that the trigger was detected. For example, "rocket" or "eyes"'
    required: false
    default: "eyes"
  trigger:
    description: 'The string to look for in comments as an IssueOps trigger. Example: ".deploy"'
    required: false
    default: ".deploy"
  noop_trigger:
    description: 'The string to look for in comments as an IssueOps noop trigger. Example: "noop"'
    required: false
    default: "noop"
  lock_trigger:
    description: 'The string to look for in comments as an IssueOps lock trigger. Used for locking branch deployments on a specific branch. Example: ".lock"'
    required: false
    default: ".lock"
  unlock_trigger:
    description: 'The string to look for in comments as an IssueOps unlock trigger. Used for unlocking branch deployments. Example: ".unlock"'
    required: false
    default: ".unlock"
  help_trigger:
    description: 'The string to look for in comments as an IssueOps help trigger. Example: ".help"'
    required: false
    default: ".help"
  lock_info_alias:
    description: 'An alias or shortcut to get details about the current lock (if it exists) Example: ".info"'
    required: false
    default: ".wcid"
  stable_branch:
    description: 'The name of a stable branch to deploy to (rollbacks). Example: "main"'
    required: false
    default: "main"
  prefix_only:
    description: 'If "false", the trigger can match anywhere in the comment'
    required: false
    default: "true"
  update_branch:
    description: 'Determine how you want this Action to handle "out-of-date" branches. Available options: "disabled", "warn", "force". "disabled" means that the Action will not care if a branch is out-of-date. "warn" means that the Action will warn the user that a branch is out-of-date and exit without deploying. "force" means that the Action will force update the branch. Note: The "force" option is not recommended due to Actions not being able to re-run CI on commits originating from Actions itself'
    required: false
    default: "warn"
  required_contexts:
    description: 'Manually enforce commit status checks before a deployment can continue. Only use this option if you wish to manually override the settings you have configured for your branch protection settings for your GitHub repository. Default is "false" - Example value: "context1,context2,context3" - In most cases you will not need to touch this option'
    required: false
    default: "false"
  skip_ci:
    description: 'A comma seperated list of environments that will not use passing CI as a requirement for deployment. Use this option to explicitly bypass branch protection settings for a certain environment in your repository. Default is an empty string "" - Example: "development,staging"'
    required: false
    default: ""
  skip_reviews:
    description: 'A comma seperated list of environment that will not use reviews/approvals as a requirement for deployment. Use this options to explicitly bypass branch protection settings for a certain environment in your repository. Default is an empty string "" - Example: "development,staging"'
    required: false
    default: ""
  allow_forks:
    description: 'Allow branch deployments to run on repository forks. If you want to harden your workflows, this option can be set to false. Default is "true"'
    required: false
    default: "true"
  admins:
    description: 'A comma seperated list of GitHub usernames or teams that should be considered admins by this Action. Admins can deploy pull requests without the need for branch protection approvals. Example: "monalisa,octocat,my-org/my-team"'
    required: false
    default: "false"
  admins_pat:
    description: 'A GitHub personal access token with "read:org" scopes. This is only needed if you are using the "admins" option with a GitHub org team. For example: "my-org/my-team"'
    required: false
    default: "false"
  merge_deploy_mode:
    description: This is an advanced option that is an alternate workflow bundled into this Action. You can control how merge commits are handled when a PR is merged into your repository's default branch. If the merge commit SHA matches the latest deployment for the same environment, then the 'continue' output will be set to 'false' which indicates that a deployment should not be performed again as the latest deployment is identical. If the merge commit SHA does not match the latest deployment for the same environment, then the 'continue' output will be set to 'true' which indicates that a deployment should be performed. With this option, the 'environment' output is also set for subsequent steps to reference
    required: false
    default: "false"
outputs:
  triggered:
    description: 'The string "true" if the trigger was found, otherwise the string "false"'
  comment_body:
    description: The comment body
  comment_body_without_op:
    description: The comment body without operation
  environment:
    description: The environment that has been selected for a deployment
  noop:
    description: 'The string "true" if the noop trigger was found, otherwise the string "false" - Use this to conditionally control whether your deployment runs as a noop or not'
  ref:
    description: The ref (branch or sha) to use with deployment
  comment_id:
    description: The comment id which triggered this deployment
  type:
    description: "The type of trigger that was detected (examples: deploy, lock, unlock)"
  continue:
    description: 'The string "true" if the deployment should continue, otherwise empty - Use this to conditionally control if your deployment should proceed or not'
  fork:
    description: 'The string "true" if the pull request is a fork, otherwise "false"'
  fork_ref:
    description: 'The true ref of the fork'
  fork_label:
    description: 'The API label field returned for the fork'
  fork_checkout:
    description: 'The console command presented in the GitHub UI to checkout a given fork locally'
  fork_full_name:
    description: 'The full name of the fork in "org/repo" format'
  deployment_id: 
    description: The ID of the deployment created by running this action
runs:
  using: "node16"
  main: "dist/index.js"
  post: "dist/index.js"
